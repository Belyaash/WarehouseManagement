// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Balances.Balance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<int>("DomainResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("domain_resource_id");

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("measure_unit_id");

                    b.HasKey("Id")
                        .HasName("pk_balances");

                    b.HasIndex("DomainResourceId")
                        .HasDatabaseName("ix_balances_domain_resource_id");

                    b.HasIndex("MeasureUnitId")
                        .HasDatabaseName("ix_balances_measure_unit_id");

                    b.ToTable("balances", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DispatchDocumentResources.DispatchDocumentResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BalanceId")
                        .HasColumnType("integer")
                        .HasColumnName("balance_id");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<int>("DispatchDocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("dispatch_document_id");

                    b.Property<int>("DomainResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("domain_resource_id");

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("measure_unit_id");

                    b.HasKey("Id")
                        .HasName("pk_dispatch_document_resources");

                    b.HasIndex("BalanceId")
                        .HasDatabaseName("ix_dispatch_document_resources_balance_id");

                    b.HasIndex("DispatchDocumentId")
                        .HasDatabaseName("ix_dispatch_document_resources_dispatch_document_id");

                    b.HasIndex("DomainResourceId")
                        .HasDatabaseName("ix_dispatch_document_resources_domain_resource_id");

                    b.HasIndex("MeasureUnitId")
                        .HasDatabaseName("ix_dispatch_document_resources_measure_unit_id");

                    b.ToTable("dispatch_document_resources", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DispatchDocuments.DispatchDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("client_id");

                    b.Property<DateOnly>("DateOnly")
                        .HasColumnType("date")
                        .HasColumnName("date_only");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("document_number");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("pk_dispatch_documents");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_dispatch_documents_client_id");

                    b.HasIndex("DocumentNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_dispatch_documents_document_number");

                    b.ToTable("dispatch_documents", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.DomainClients.DomainClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("pk_domain_clients");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_domain_clients_name");

                    b.ToTable("domain_clients", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.LoadingDocumentResources.LoadingDocumentResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BalanceId")
                        .HasColumnType("integer")
                        .HasColumnName("balance_id");

                    b.Property<int>("Count")
                        .HasColumnType("integer")
                        .HasColumnName("count");

                    b.Property<int>("DomainResourceId")
                        .HasColumnType("integer")
                        .HasColumnName("domain_resource_id");

                    b.Property<int>("LoadingDocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("loading_document_id");

                    b.Property<int>("MeasureUnitId")
                        .HasColumnType("integer")
                        .HasColumnName("measure_unit_id");

                    b.HasKey("Id")
                        .HasName("pk_loading_document_resources");

                    b.HasIndex("BalanceId")
                        .HasDatabaseName("ix_loading_document_resources_balance_id");

                    b.HasIndex("DomainResourceId")
                        .HasDatabaseName("ix_loading_document_resources_domain_resource_id");

                    b.HasIndex("LoadingDocumentId")
                        .HasDatabaseName("ix_loading_document_resources_loading_document_id");

                    b.HasIndex("MeasureUnitId")
                        .HasDatabaseName("ix_loading_document_resources_measure_unit_id");

                    b.ToTable("loading_document_resources", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.LoadingDocuments.LoadingDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateOnly")
                        .HasColumnType("date")
                        .HasColumnName("date_only");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("document_number");

                    b.HasKey("Id")
                        .HasName("pk_loading_documents");

                    b.HasIndex("DocumentNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_loading_documents_document_number");

                    b.ToTable("loading_documents", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.MeasureUnits.MeasureUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("pk_measure_units");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_measure_units_name");

                    b.ToTable("measure_units", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Resources.DomainResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.HasKey("Id")
                        .HasName("pk_resources");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_resources_name");

                    b.ToTable("resources", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Balances.Balance", b =>
                {
                    b.HasOne("Domain.Entities.Resources.DomainResource", "DomainResource")
                        .WithMany("Balances")
                        .HasForeignKey("DomainResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_balances_resources_domain_resource_id");

                    b.HasOne("Domain.Entities.MeasureUnits.MeasureUnit", "MeasureUnit")
                        .WithMany("Balances")
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_balances_measure_units_measure_unit_id");

                    b.Navigation("DomainResource");

                    b.Navigation("MeasureUnit");
                });

            modelBuilder.Entity("Domain.Entities.DispatchDocumentResources.DispatchDocumentResource", b =>
                {
                    b.HasOne("Domain.Entities.Balances.Balance", "Balance")
                        .WithMany("DispatchDocumentResources")
                        .HasForeignKey("BalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dispatch_document_resources_balances_balance_id");

                    b.HasOne("Domain.Entities.DispatchDocuments.DispatchDocument", "DispatchDocument")
                        .WithMany("DispatchDocumentResources")
                        .HasForeignKey("DispatchDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dispatch_document_resources_dispatch_documents_dispatch_doc");

                    b.HasOne("Domain.Entities.Resources.DomainResource", "DomainResource")
                        .WithMany("DispatchDocumentResources")
                        .HasForeignKey("DomainResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_dispatch_document_resources_resources_domain_resource_id");

                    b.HasOne("Domain.Entities.MeasureUnits.MeasureUnit", "MeasureUnit")
                        .WithMany("DispatchDocumentResources")
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_dispatch_document_resources_measure_units_measure_unit_id");

                    b.Navigation("Balance");

                    b.Navigation("DispatchDocument");

                    b.Navigation("DomainResource");

                    b.Navigation("MeasureUnit");
                });

            modelBuilder.Entity("Domain.Entities.DispatchDocuments.DispatchDocument", b =>
                {
                    b.HasOne("Domain.Entities.DomainClients.DomainClient", "Client")
                        .WithMany("DispatchDocuments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_dispatch_documents_domain_clients_client_id");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Domain.Entities.LoadingDocumentResources.LoadingDocumentResource", b =>
                {
                    b.HasOne("Domain.Entities.Balances.Balance", "Balance")
                        .WithMany("LoadingDocumentResources")
                        .HasForeignKey("BalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loading_document_resources_balances_balance_id");

                    b.HasOne("Domain.Entities.Resources.DomainResource", "DomainResource")
                        .WithMany("LoadingDocumentResources")
                        .HasForeignKey("DomainResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_loading_document_resources_resources_domain_resource_id");

                    b.HasOne("Domain.Entities.LoadingDocuments.LoadingDocument", "LoadingDocument")
                        .WithMany("Resources")
                        .HasForeignKey("LoadingDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loading_document_resources_loading_documents_loading_docume");

                    b.HasOne("Domain.Entities.MeasureUnits.MeasureUnit", "MeasureUnit")
                        .WithMany("LoadingDocumentResources")
                        .HasForeignKey("MeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_loading_document_resources_measure_units_measure_unit_id");

                    b.Navigation("Balance");

                    b.Navigation("DomainResource");

                    b.Navigation("LoadingDocument");

                    b.Navigation("MeasureUnit");
                });

            modelBuilder.Entity("Domain.Entities.Balances.Balance", b =>
                {
                    b.Navigation("DispatchDocumentResources");

                    b.Navigation("LoadingDocumentResources");
                });

            modelBuilder.Entity("Domain.Entities.DispatchDocuments.DispatchDocument", b =>
                {
                    b.Navigation("DispatchDocumentResources");
                });

            modelBuilder.Entity("Domain.Entities.DomainClients.DomainClient", b =>
                {
                    b.Navigation("DispatchDocuments");
                });

            modelBuilder.Entity("Domain.Entities.LoadingDocuments.LoadingDocument", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("Domain.Entities.MeasureUnits.MeasureUnit", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("DispatchDocumentResources");

                    b.Navigation("LoadingDocumentResources");
                });

            modelBuilder.Entity("Domain.Entities.Resources.DomainResource", b =>
                {
                    b.Navigation("Balances");

                    b.Navigation("DispatchDocumentResources");

                    b.Navigation("LoadingDocumentResources");
                });
#pragma warning restore 612, 618
        }
    }
}
