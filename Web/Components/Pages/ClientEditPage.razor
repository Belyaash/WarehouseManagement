@page "/clients/edit"
@page "/clients/edit/{ObjectId:int}"
@using Application.Contracts.Features.Client.Commands.InsertClient
@using Application.Contracts.Features.Client.Commands.UpdateClient
@using Application.Contracts.Features.Client.Commands.UpdateClientState
@using Application.Contracts.Features.Client.Queries.GetClient
@using Domain.Enums
@using Newtonsoft.Json.Linq
@inject HttpClient HttpClient
@rendermode InteractiveServer

<h2>@(_isCreateMode ? "Создание клиента" : "Редактирование клиента")</h2>
<PageTitle>@(_isCreateMode ? "Создание клиента" : "Редактирование клиента")</PageTitle>

@if (_dto != null)
{
    <EditForm Model="_dto" OnValidSubmit="HandleSave">
        <div class="form-group">
            <label>Наименование</label>
            <InputText @bind-Value="_dto!.Name" @onchange="@(e => _dto.Name = e.Value?.ToString() ?? string.Empty)" class="form-control"/>
            <ValidationMessage For="@(() => _dto.Name)"/>
        </div>

        <div class="form-group">
            <label>Адрес</label>
            <InputText @bind-Value="_dto!.Address" @onchange="@(e => _dto.Address = e.Value?.ToString() ?? string.Empty)" class="form-control"/>
            <ValidationMessage For="@(() => _dto.Name)"/>
        </div>

        @if (_showError)
        {
            <div class="alert alert-danger">@_errorMessage</div>
        }
        <div class="action-buttons mt-3">

            <button type="button" class="btn btn-secondary" @onclick="ReturnToList">
                Назад к списку
            </button>
            <button type="submit" class="btn btn-primary ms-2">
                Сохранить
            </button>
            @if (!_isCreateMode)
            {
                    <button type="button" class="btn btn-danger ms-2" @onclick="Delete">
                        Удалить
                    </button>

                    <button type="button" class="btn btn-warning ms-2" @onclick="ToggleArchive">
                        @(_dto.State == StateType.Actual ? "В архив" : "Из архива")
                    </button>
            }
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int? ObjectId { get; set; }
    private GetClientResponseDto? _dto { get; set; }
    private bool _isCreateMode = true;
    [Inject]
    public required NavigationManager Navigation { get; set; }
    private Timer? _errorTimer;
    private bool _showError;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (ObjectId.HasValue)
        {
            _isCreateMode = false;
            _dto = (await HttpClient.GetFromJsonAsync<GetClientResponseDto>($"api/client?id={ObjectId}", CancellationToken.None))!;
        }
        else
        {
            _dto = new GetClientResponseDto
            {
                Name = "",
                State = StateType.Actual,
                Address = "",
                IsUsed = false,
            };
        }
    }

    private async Task HandleSave()
    {
        _showError = false;
        _errorMessage = null;
        _errorTimer?.Dispose();

        if (ObjectId == null)
        {
            await Create();
            return;
        }

        await Update();
    }

    private async Task Create()
    {
        var dto = new InsertClientRequestDto()
        {
            Name = _dto!.Name,
            Address = _dto!.Address
        };
        var response = await HttpClient.PostAsJsonAsync("api/client", dto);

        await ReadCommandResponse(response);
    }

    private async Task Update()
    {
        var dto = new UpdateClientRequestDto()
        {
            Id = ObjectId!.Value,
            Name = _dto!.Name,
            Address = _dto.Address
        };

        var response = await HttpClient.PutAsJsonAsync("api/client", dto);

        await ReadCommandResponse(response);
    }

    private async Task ReadCommandResponse(HttpResponseMessage response)
    {
        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/clients");
        }
        else
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            var jObject = JObject.Parse(responseContent);
            _errorMessage = jObject["message"]?.ToString();
            StartErrorTimer();
        }
    }

    private async Task Delete()
    {
        var response = await HttpClient.DeleteAsync($"api/client?id={ObjectId}");

        await ReadCommandResponse(response);
    }

    private async Task ToggleArchive()
    {
        var dto = new UpdateClientStateRequestDto()
        {
            Id = ObjectId!.Value,
            StateType = _dto!.State == StateType.Actual ? StateType.Archived : StateType.Actual
        };

        var response = await HttpClient.PutAsJsonAsync("api/client/state", dto);

        await ReadCommandResponse(response);
    }

    private void ReturnToList()
    {
        Navigation.NavigateTo("/clients");
    }

    private void StartErrorTimer()
    {
        _showError = true;
        _errorTimer = new Timer(_ =>
        {
            _showError = false;
            InvokeAsync(StateHasChanged);
        }, null, 5000, Timeout.Infinite);
    }
}